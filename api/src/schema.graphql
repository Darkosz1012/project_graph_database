interface ITime @relationshipProperties {
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
}

type User {
  # @exclude(operations: [CREATE, DELETE, UPDATE])
  userId: ID! @id(autogenerate: true, unique: true)
  username: String!
  email: String!
    @auth(rules: [{ operations: [READ], allow: { id: "$jwt.sub" } }])
  password: String! @private
  likedPosts: [Post!]!
    @relationship(type: "LIKED", properties: "ITime", direction: OUT)
  createdPosts: [Post!]!
    @relationship(type: "CREATED", properties: "ITime", direction: OUT)
  invitationToFriends: [User!]!
    @relationship(type: "INVITED", properties: "ITime", direction: IN)
  friends: [User!]!
    @relationship(type: "FRIEND", properties: "ITime", direction: OUT)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  mutualFriends: [User!]!
    @cypher(
      statement: """
      MATCH (this)-[:FRIEND]-(f:User)-[:FRIEND]-(u:User {userId: $auth.jwt.sub})
      WHERE u.userId <> this.userId
      RETURN distinct f
      """
    )
    @auth(rules: [{ isAuthenticated: true }])
  mutualFriendsCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:FRIEND]-(f:User)-[:FRIEND]-(u:User {userId: $auth.jwt.sub})
      WHERE u.userId <> this.userId
      RETURN count(distinct f)
      """
    )
    @auth(rules: [{ isAuthenticated: true }])
}

type Post
  @auth(
    rules: [
      {
        operations: [READ]
        where: {
          OR: [
            { createdBy: { userId: "$jwt.sub" } }
            { createdBy: { friends: { userId: "$jwt.sub" } } }
            { onlyFriends: false }
          ]
        }
        # where: { onlyFriends: false }
        allowUnauthenticated: true
      }
    ]
  ) {
  postId: ID! @id(autogenerate: true, unique: true)
  content: String
  onlyFriends: Boolean
  likedBy: [User!]!
    @relationship(type: "LIKED", properties: "ITime", direction: IN)
  createdBy: User!
    @relationship(type: "CREATED", properties: "ITime", direction: IN)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
}

type Token {
  accessToken: String!
  refreshToken: String
  username: String
}

type Mutation {
  signIn(usernameOrEmail: String!, password: String!): Token!
  signUp(username: String!, email: String!, password: String!): Token!
  refreshToken(refreshToken: String!): Token!

  createPost(content: String!, onlyFriends: Boolean!): Post!

  createInvitationToFriends(userId: ID!): Boolean!

  declineFriendInvitation(userId: ID!): Boolean!
  acceptFriendInvitation(userId: ID!): Boolean!
}

type Query {
  myaccount: User
    @cypher(statement: "MATCH (u:User { userId: $auth.jwt.sub }) RETURN u")
    @auth(rules: [{ isAuthenticated: true }])
  friendsProposition(limit: Int = 30): [User!]!
    @cypher(
      statement: """
      MATCH (u:User), (m:User{userId:$auth.jwt.sub})
         WHERE NOT (u)-[:FRIEND]-(m) AND NOT (u)-[:INVITED]-(m) AND u<>m
         CALL {
        WITH u, m
        OPTIONAL MATCH (u)-[:FRIEND]-(f:User)-[:FRIEND]-(m)
        WHERE u.userId <> m.userId
        RETURN f
      } RETURN u,count(distinct f)  ORDER BY count(distinct f) DESC  LIMIT toInteger($limit)
      """
    )
    @auth(rules: [{ isAuthenticated: true }])
}
