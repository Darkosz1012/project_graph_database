# """Informs @neo4j/graphql that there should be a uniqueness constraint in the database for the decorated field."""
# directive @unique(
#     """The name which should be used for this constraint. By default; type name, followed by an underscore, followed by the field name."""
#     constraintName: String
# ) on FIELD_DEFINITION
# scalar Point
# scalar DateTime
# scalar PointInput

interface ITime @relationshipProperties {
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
}

type User {
  # @exclude(operations: [CREATE, DELETE, UPDATE])
  userId: ID! @id(autogenerate: true, unique: true)
  username: String!
  email: String!
    @auth(rules: [{ operations: [READ], allow: { id: "$jwt.sub" } }])
  password: String! @private
  likedPosts: [Post!]!
    @relationship(type: "LIKED", properties: "ITime", direction: OUT)
  createdPosts: [Post!]!
    @relationship(type: "CREATED", properties: "ITime", direction: OUT)
  invitationToFriends: [User!]!
    @relationship(type: "INVITED", properties: "ITime", direction: IN)
  friends: [User!]!
    @relationship(type: "FRIEND", properties: "ITime", direction: OUT)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
  mutualFriends: [User!]!
    @cypher(
      statement: """
      MATCH (this)-[:FRIEND]-(f:User)-[:FRIEND]-(u:User {userId: $auth.jwt.sub})
      WHERE u.userId <> this.userId
      RETURN distinct f
      """
    )
    @auth(rules: [{ isAuthenticated: true }])
  mutualFriendsCount: Int!
    @cypher(
      statement: """
      MATCH (this)-[:FRIEND]-(f:User)-[:FRIEND]-(u:User {userId: $auth.jwt.sub})
      WHERE u.userId <> this.userId
      RETURN count(distinct f)
      """
    )
    @auth(rules: [{ isAuthenticated: true }])
}

type Post
  # @exclude(operations: [CREATE, DELETE, UPDATE])
  @auth(
    rules: [
      {
        operations: [READ]
        where: {
          OR: [
            { createdBy: { friends: { userId: "$jwt.sub" } } }
            { createdBy: { userId: "$jwt.sub" } }
            { onlyFriends: false }
          ]
        }
        allowUnauthenticated: true
      }
    ]
  ) {
  postId: ID! @id(autogenerate: true, unique: true)
  content: String
  onlyFriends: Boolean
  likedBy: [User!]!
    @relationship(type: "LIKED", properties: "ITime", direction: IN)
  createdBy: User!
    @relationship(type: "CREATED", properties: "ITime", direction: IN)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime! @timestamp(operations: [CREATE, UPDATE])
}

type Token {
  accessToken: String!
  refreshToken: String
  username: String
}

type Mutation {
  signIn(usernameOrEmail: String!, password: String!): Token!
  signUp(username: String!, email: String!, password: String!): Token!
  refreshToken(refreshToken: String!): Token!

  createPost(content: String!, onlyFriends: Boolean!): Post!

  createInvitationToFriends(userId: ID!): Boolean!

  declineFriendInvitation(userId: ID!): Boolean!
  acceptFriendInvitation(userId: ID!): Boolean!
}

type Query {
  myaccount: User
    @cypher(
      statement: "MATCH (u:User { userId: $auth.jwt.sub }) RETURN u, $auth"
    )
    @auth(rules: [{ isAuthenticated: true }])
}

# type User {
#   userId: ID!
#   name: String
#   reviews: [Review] @relationship(type: "WROTE", direction: OUT)
#   avgStars: Float
#     @cypher(
#       statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
#     )
#   numReviews: Int
#     @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
#   recommendations(first: Int = 3): [Business]
#     @cypher(
#       statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) ) WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
#     )
# }

# type Business {
#   businessId: ID!
#   name: String!
#   address: String
#   city: String
#   state: String
#   location: Point
#   avgStars: Float
#     @cypher(
#       statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
#     )
#   reviews: [Review] @relationship(type: "REVIEWS", direction: IN)
#   categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
# }

# type Review {
#   reviewId: ID!
#   stars: Float
#   text: String
#   date: DateTime
#   business: Business @relationship(type: "REVIEWS", direction: OUT)
#   user: User @relationship(type: "WROTE", direction: IN)
# }

# type Category {
#   name: ID!
#   businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
# }

# type RatingCount @exclude {
#   stars: Float!
#   count: Int!
# }

# type Mutation {
#   mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business
#     @cypher(
#       statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
#     )
#   mergeUser(name: String!, userId: ID!): User
#     @cypher(
#       statement: """
#       MERGE (u:User {userId: $userId})
#       ON CREATE SET u.name = $name
#       RETURN u
#       """
#     )
#   mergeBusiness(
#     businessId: ID!
#     name: String!
#     address: String!
#     city: String!
#     state: String!
#     latitude: Float!
#     longitude: Float!
#   ): Business
#     @cypher(
#       statement: """
#       MERGE (b:Business {businessId: $businessId})
#       ON CREATE SET b.name = $name,
#                     b.address = $address,
#                     b.city = $city,
#                     b.state = $state,
#                     b.location = Point({latitude: $latitude, longitude: $longitude})
#       RETURN b
#       """
#     )
# }

# type Query {
#   userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
#   ratingsCount: [RatingCount]
#     @cypher(
#       statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
#     )
# }
